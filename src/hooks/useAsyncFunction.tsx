import {useEffect,useState} from 'react';

/*
 REF: https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj
  
 Description:--> Generated by Github Copilot
    The useAsyncFunction hook takes two arguments:
    - asyncFunction: a function that returns a promise
    - defaultValue: the value to return while the promise is pending
  
    The hook returns an array with three elements:
    - value: the resolved value of the promise
    - error: the error if the promise is rejected
    - isPending: a boolean indicating if the promise is pending
  
    The hook takes care of calling the async function, and updating the state of the component
    when the promise is resolved or rejected.
*/

export function useAsyncFunction<T>(
  asyncFunction: () => Promise<T>,
  defaultValue: T
): [T, string | null, boolean] {
  const [state, setState] = useState({
    value: defaultValue,
    error: null,
    isPending: true
  });

  useEffect(() => {
    asyncFunction()
      .then(value => setState({ value, error: null, isPending: false }))
      .catch(error =>
        setState({ value: defaultValue, error: error.toString(), isPending: false })
      );
  }, [asyncFunction, defaultValue]);

  const { value, error, isPending } = state;
  return [value, error, isPending];
}